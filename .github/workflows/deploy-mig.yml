name: Deploy to MIG
on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      mig_name:
        required: true
        type: string
      resources_project_id:
        required: false
        type: string
        default: neat-airport-407301
      mig_project_id:
        required: false
        type: string
        default: eng-ai-dev
      region:
        required: false
        type: string
        default: us-central1
      zone:
        required: false
        type: string
        default: us-central1-a

env:
  RESOURCES_PROJECT_ID: ${{ inputs.resources_project_id }}
  MIG_PROJECT_ID: ${{ inputs.mig_project_id }}
  REGION: ${{ inputs.region }}
  ZONE: ${{ inputs.zone }}

jobs:
  cleanup-old-image:
    runs-on: self-hosted
    outputs:
      old_image: ${{ steps.get-current.outputs.image }}
    steps:
      - name: Setup MIG Project Auth
        run: |
          # Store current config
          gcloud config configurations create temp-config || true
          gcloud config set account scheduler-zen-dev@neat-airport-407301.iam.gserviceaccount.com
          
          # Write the MIG service account key to a file
          echo '${{ secrets.MIG_SA_KEY }}' > mig-sa-key.json
          
          # Get current MIG template using MIG service account
          gcloud auth activate-service-account scheduler-zen@eng-ai-dev.iam.gserviceaccount.com \
            --key-file=mig-sa-key.json
          rm mig-sa-key.json

      - name: Get Current Image from MIG
        id: get-current
        run: |
          echo "Looking for MIG in project ${{ env.MIG_PROJECT_ID }}, zone ${{ env.ZONE }}"
          # Get the current template name
          TEMPLATE_NAME=$(gcloud compute instance-groups managed describe ${{ inputs.mig_name }} \
            --project=${{ env.MIG_PROJECT_ID }} \
            --zone=${{ env.ZONE }} \
            --format="get(instanceTemplate)")
            
          echo "Found template: $TEMPLATE_NAME"
          
          # Get the image from template
          CURRENT_IMAGE=$(gcloud compute instance-templates describe $TEMPLATE_NAME \
            --project=${{ env.MIG_PROJECT_ID }} \
            --format="get(properties.disks[0].initializeParams.sourceImage)")
          
          echo "current_image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
          echo "Current image: $CURRENT_IMAGE"
          
          # Switch back to resources project service account
          gcloud config set account scheduler-zen-dev@neat-airport-407301.iam.gserviceaccount.com

  deploy-new-image:
    needs: cleanup-old-image
    runs-on: self-hosted
    steps:
      - name: Get Latest Image
        id: get-latest
        run: |
          # Use resources project service account (default)
          # Get the latest image for the app from resources project
          LATEST_IMAGE=$(gcloud compute images list \
            --project=${{ env.RESOURCES_PROJECT_ID }} \
            --filter="name ~ ${{ inputs.app_name }}-image-" \
            --sort-by=~creationTimestamp \
            --limit=1 \
            --format="get(name)")
          
          echo "latest_image=$LATEST_IMAGE" >> $GITHUB_OUTPUT
          echo "Latest image: $LATEST_IMAGE"

      - name: Switch to MIG Project Auth
        run: |
          # Write the MIG service account key to a file
          echo '${{ secrets.MIG_SA_KEY }}' > mig-sa-key.json
          # Authenticate with the MIG service account
          gcloud auth activate-service-account scheduler-zen@eng-ai-dev.iam.gserviceaccount.com \
            --key-file=mig-sa-key.json
          rm mig-sa-key.json

      - name: Create New Instance Template
        id: create-template
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TEMPLATE_NAME="${{ inputs.app_name }}-template-${TIMESTAMP}"
          
          # Create new instance template in MIG project
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --project=${{ env.MIG_PROJECT_ID }} \
            --image=${{ steps.get-latest.outputs.latest_image }} \
            --image-project=${{ env.RESOURCES_PROJECT_ID }}
          
          echo "template_name=$TEMPLATE_NAME" >> $GITHUB_OUTPUT

      - name: Update MIG
        run: |
          echo "Updating MIG in project ${{ env.MIG_PROJECT_ID }}, zone ${{ env.ZONE }}"
          gcloud compute instance-groups managed rolling-action start-update ${{ inputs.mig_name }} \
            --project=${{ env.MIG_PROJECT_ID }} \
            --zone=${{ env.ZONE }} \
            --version=template=${{ steps.create-template.outputs.template_name }}
          
      - name: Switch Back to Resources Project Auth
        run: |
          gcloud config set account scheduler-zen-dev@neat-airport-407301.iam.gserviceaccount.com

  cleanup:
    needs: [cleanup-old-image, deploy-new-image]
    runs-on: self-hosted
    if: success()
    steps:
      - name: Delete Old Image
        run: |
          # Using resources project service account (default)
          if [[ -n "${{ needs.cleanup-old-image.outputs.old_image }}" ]]; then
            echo "Deleting old image: ${{ needs.cleanup-old-image.outputs.old_image }}"
            gcloud compute images delete ${{ needs.cleanup-old-image.outputs.old_image }} \
              --project=${{ env.RESOURCES_PROJECT_ID }} \
              --quiet || true
          fi